---
title: Run Multiple Process Groups in an App
objective: 
layout: docs
nav: firecracker
order: 90
---

<%= partial "/docs/partials/v2_transition_banner" %>

Fly.io has the notion of process groups to let a single Fly App run multiple programs. You can define multiple processes in your `fly.toml`, giving each a name. Each defined process runs in its own Fly Machine within the app, which means they don't compete with each other for VM resources, and they can be scaled individually.

## The default process group

If you don't explicitly define any processes, the Machines in a Fly App belong to the `"app"` process group, and on boot they run whatever entrypoint process the app's Docker image has.

You may have noticed that the `services` section in the default app configuration applies to the `"app"` process:

```toml
...
[[services]]
  http_checks = []
  internal_port = 8080
  processes = ["app"]
```

Once any processes are explicitly defined, there are no implicit processes; if you want an `"app"` process, it has to be included in the config.

## Add process groups to an app

To run multiple processes, make sure all the things you want to run are installed in your app's Docker image. Then, define a `[processes]` block in your `fly.toml`, matching process group names and the commands they should run.  Here's an example: 

```toml
[processes]
  web = "bin/rails fly:server"
  cron = "supercronic /app/crontab"
```

The commands you configure here correspond to CMD in Docker; they don't replace the ENTRYPOINT of your app but will supersede.

### Processes and other configuration options
* to configure services, mount, and [statics] configurations: these accept an array of process names to match the config block





 `fly deploy` creates and rolls out a single release, 

Say you have a user-facing web app and you'd like to run Sidekiq workers or Supercronic alongside it. You can 

When you deploy a Fly App, you start up one or more Fly Machines from a single Docker image; all the VMs have the same things installed. But Machines in different process groups run different commands at boot.

Before launch

* what if there's a volume? Do mounts work by process groups?


Additional process groups are defined in the [`processes` section](https://fly.io/docs/reference/configuration/#the-processes-section) of `fly.toml`.

``

(It would not be efficient to run a whole worker VM to do nothing, but this is just illustrative.)

Create a [`services` section](/docs/reference/configuration/#the-services-sections) for each process group that should be able to accept connections via Fly Proxy (publicly or via Flycast). 

Fly Proxy doesn't know about process groups: it may send requests to any Machine with a matching port, according to its own load-balancing rules. If more than one process group needs services defined, have each one handle connections on different external ports. 


## First deploy

With the app configured in `fly.toml`, launch it and say yes to deploy straight away:

```cmd
fly launch --image nginx
```
<aside>Since nginx listens on port 80 by default, I would have to set `internal_port` correspondingly in my `fly.toml` in order to reach my app.</aside>

A single Machine is started and as expected, it has process group `"app"`:

```cmd
fly status
```
```out
App
  Name     = testrun                  
  Owner    = personal              
  Hostname = testrun.fly.dev          
  Image    = library/nginx:latest  
  Platform = machines              

Machines
ID              PROCESS VERSION REGION  STATE   HEALTH CHECKS   LAST UPDATED         
6e82d411c77287  app     3       yyz     started 1 total, 1 passing      2023-03-07T00:49:57Z
```

### Create a VM for each additional process group

Add a Machine for each additional command/entrypoint you want a group for, by `fly m clone`-ing the "app" Machine and adding the name of the new group with the `--process-group` option.

  ```cmd
  fly machine clone --process-group worker 6e82d411c77287
  ```

The above creates a new Machine with metadata identifying it as belonging to the `worker` process group.

If the app hasn't been deployed since you added the `"worker"` process to `fly.toml`, deploy now to update the command, services, and health checks for each Machine according to what's configured for its process group.


```cmd
fly status
```
```out
App
  Name     = testrun                  
  Owner    = personal              
  Hostname = testrun.fly.dev          
  Image    = library/nginx:latest  
  Platform = machines              

Machines
ID              PROCESS VERSION REGION  STATE   HEALTH CHECKS           LAST UPDATED         
6e82d411c77287  app     3       yyz     started 1 total, 1 passing      2023-03-07T00:49:57Z
e2865641be9786  worker  3       yyz     started                         2023-03-07T00:50:02Z
```

## Scale a process group horizontally

`fly machine clone` can be used to build out multiple VMs within a process group: 

```
fly machine clone --region gru e2865641be9786
```

If Machine 21781973f03e89 belongs to the `"worker"` process group, the new Machine will be created in the `gru` (SÃ£o Paulo) region with the command, services, and checks that are configured on the app for `"worker"` Machines. 

## Scale a process group vertically

At the moment, to change the VM size for an entire process group, you have to update each Machine that belongs to it. See [Scale Machine CPU and RAM](/docs/apps/scale-machine/) for how to do this.

## Move a Machine between process groups
 
You can change the process group of an existing Machine by updating its metadata:

```cmd
fly machine update --metadata fly_process_group=app 21781973f03e89
```
Then deploy the app to apply the configuration for that process group to the Machine:

```cmd
fly deploy
```

## Process groups and legacy (Nomad) apps

<div class="callout">
Known issues with process groups and Nomad apps:
* Running multiple processes in this way is not compatible with autoscaling.
* Unexpected behavior with regions may arise if you use a `[processes]` block and then delete it.
</div>

In a "V1" Fly App, you don't need to specify which machines are assigned to which processes; Nomad does this for you. After adding process groups to your app's `fly.toml` and deploying, scale them up with per-process commands. For example:

```
$ fly scale count web=2 worker=2
```

### Per-process commands (Nomad)

Some Nomad-only `fly` commands accept a process name as an argument. The following examples shows which:

* Change VM counts: `fly scale count web=2 worker=1`
* Change VM size: `fly scale vm shared-cpu-1x --group worker`
* Change regions: `fly regions set iad --group worker`

For a bit more context on the original `processes` feature, you can read our [community announcement](https://community.fly.io/t/preview-multi-process-apps-get-your-workers-here/2316/).