---
title: Run Multiple Process Groups in an App
objective: 
layout: docs
nav: firecracker
order: 90
---

<%= partial "/docs/partials/v2_transition_banner" %>

Process groups are a way to manage separate tasks under the umbrella of a single Fly App. You can maintain a single code base, and everything gets deployed in a single release. But different processes run on their own Machines&mdash;which means they don't compete with each other for VM resources, and they can be scaled individually.

When you deploy a Fly App, you start up one or more Fly Machines from a single Docker image; all the VMs have the same things installed. But Machines in different process groups run different commands at boot.

## The default process group

When you deploy a Fly App for the first time, a single Machine is started. This first Machine belongs to the default process group, called `"app"`. It'll run whatever process the Docker image specifies.

## Adding process groups to an app

### Configure the process groups

Additional process groups are defined in the [`processes` section](https://fly.io/docs/reference/configuration/#the-processes-section) of `fly.toml`.

For each process group, specify a name and a command to be run at startup. Here's an example: 

```toml
[processes]
web = "nginx -g 'daemon off;'"
worker = "tail -F /dev/null"
```

(It would not be efficient to run a whole worker VM to do nothing, but it works for demonstration purposes.)

Create a [`services` section](/docs/reference/configuration/#the-services-sections) for each process group that should be able to accept connections via Fly Proxy (publicly or via Flycast). The `services` section in the default app configuration applies to the default `"app"` process:

```toml
...
[[services]]
  http_checks = []
  internal_port = 8080
  processes = ["app"]
```

Fly Proxy doesn't know about process groups: it may send requests to any Machine with a matching port, according to its own load-balancing rules. If more than one process group needs services defined, have each one handle connections on different external ports. 

### Create a VM for each additional process group

Add a Machine for each additional command/entrypoint you want a group for, by `fly m clone`-ing the "app" Machine and adding the name of the new group with the `--process-group` option.

  ```cmd
  fly machine clone --process-group worker 21781973f03e89
  ```

The above creates a new Machine with metadata identifying it as belonging to the `worker` process group.

### Deploy the app

The next deployment updates the command, services, and health checks for each Machine according to what's configured for its process group in `fly.toml`.

## Change the process group of the initial Machine

## Scale a process group horizontally

`fly machine clone` can be used to build out multiple instances within a process group:

```
fly machine clone --region gru 21781973f03e89
```

## Scale a process group vertically

To change the VM size for an entire process group, update each Machine that belongs to it. 

Get all the Machines belonging to the app with `fly machine list`

* fly m list
* fly m update
* fly deploy

## Move a Machine between process groups
 
You can change the process group of an existing Machine by updating its metadata:


I think, because `m update` doesn't have the `--process-group` option, and furthermore, while `fly m clone` gets the config of the original Machine, `fly m update` only changes what you tell it to, so you have to run `fly deploy` after changing the metadata.)

```cmd
fly machine update --metadata fly_process_group=web 21781973f03e89
```
Then deploy the app to apply the configuration for that process group to the Machine:

```cmd
fly deploy
```

## Process groups and legacy (Nomad) apps

<div class="callout">
Known issues with process groups and Nomad apps:
* Running multiple processes in this way is not compatible with autoscaling.
* Unexpected behavior with regions may arise if you use a `[processes]` block and then delete it.
</div>

In a "V1" Fly App, you don't need to specify which machines are assigned to which processes; Nomad does this for you. After adding process groups to your app's `fly.toml` and deploying, scale them up with per-process commands. For example:

```
$ fly scale count web=2 worker=2
```

### Per-process commands (Nomad)

Some Nomad-only `fly` commands accept a process name as an argument. The following examples shows which:

* Change VM counts: `fly scale count web=2 worker=1`
* Change VM size: `fly scale vm shared-cpu-1x --group worker`
* Change regions: `fly regions set iad --group worker`

For a bit more context on the `processes` feature, you can read our [community announcement](https://community.fly.io/t/preview-multi-process-apps-get-your-workers-here/2316/).